import pandas as pd
import psycopg2
from psycopg2 import sql

# üìù C·∫•u h√¨nh k·∫øt n·ªëi v√† file
DEFAULT_DB = "postgres"
TARGET_DB = "laptop_db"
USER = "postgres"
PASSWORD = "postgres"
HOST = "localhost"
PORT = "5432"
EXCEL_FILE_PATH = "laptop_all.xlsx"
CSV_FILE_PATH = "laptop_all_clean.csv"

# ‚úÖ Step 1: L√†m s·∫°ch d·ªØ li·ªáu t·ª´ Excel v√† l∆∞u th√†nh CSV
try:
    df = pd.read_excel(EXCEL_FILE_PATH)

    # Ch·ªçn v√† ƒë·ªïi t√™n c·ªôt ph√π h·ª£p v·ªõi schema PostgreSQL
    df = df[['name', 'price', 'ram', 'ram_unit', 'rom_type', 'rom', 'rom_unit',
             'screen_size', 'screen_detail', 'cpu', 'gpu', 'battery', 'weight',
             'rating', 'links-href', 'brand', 'series']]

    df.rename(columns={
        'links-href': 'link_href'
    }, inplace=True)

    # Lo·∫°i b·ªè gi√° tr·ªã NaN v√† l√†m s·∫°ch d·ªØ li·ªáu
    df = df.fillna('')

    # Xu·∫•t ra CSV
    df.to_csv(CSV_FILE_PATH, index=False)
    print("‚úÖ Excel file successfully cleaned and saved as CSV.")
except Exception as e:
    print(f"‚ùå Error cleaning Excel file: {e}")
    exit()

# ‚úÖ Step 2: K·∫øt n·ªëi v·ªõi PostgreSQL v√† t·∫°o database n·∫øu ch∆∞a t·ªìn t·∫°i
try:
    conn = psycopg2.connect(
        dbname=DEFAULT_DB,
        user=USER,
        password=PASSWORD,
        host=HOST,
        port=PORT
    )
    conn.autocommit = True
    cur = conn.cursor()

    cur.execute("SELECT 1 FROM pg_database WHERE datname = %s", (TARGET_DB,))
    exists = cur.fetchone()

    if not exists:
        cur.execute(sql.SQL("CREATE DATABASE {}").format(sql.Identifier(TARGET_DB)))
        print(f"‚úÖ Database '{TARGET_DB}' created successfully.")
    else:
        print(f"‚úÖ Database '{TARGET_DB}' already exists.")

    cur.close()
    conn.close()
except Exception as e:
    print(f"‚ùå Error handling database: {e}")
    exit()

# ‚úÖ Step 3: K·∫øt n·ªëi t·ªõi database ƒë√≠ch v√† t·∫°o b·∫£ng n·∫øu ch∆∞a t·ªìn t·∫°i
try:
    conn = psycopg2.connect(
        dbname=TARGET_DB,
        user=USER,
        password=PASSWORD,
        host=HOST,
        port=PORT
    )
    conn.autocommit = True
    cur = conn.cursor()

    cur.execute("""
        CREATE TABLE IF NOT EXISTS laptops (
            id SERIAL PRIMARY KEY,
            name TEXT NOT NULL,
            price TEXT,
            ram INTEGER,
            ram_unit TEXT,
            rom_type TEXT,
            rom INTEGER,
            rom_unit TEXT,
            screen_size FLOAT,
            screen_detail TEXT,
            cpu TEXT,
            gpu TEXT,
            battery TEXT,
            weight FLOAT,
            rating FLOAT,
            link_href TEXT,
            brand TEXT,
            series TEXT
        );
    """)
    print("‚úÖ Table 'laptops' is ready.")
except Exception as e:
    print(f"‚ùå Error creating table: {e}")
    exit()

# ‚úÖ Step 4: Import d·ªØ li·ªáu t·ª´ CSV v√†o b·∫£ng PostgreSQL
try:
    with open(CSV_FILE_PATH, 'r') as f:
        cur.copy_expert(
            "COPY laptops(name, price, ram, ram_unit, rom_type, rom, rom_unit, screen_size, "
            "screen_detail, cpu, gpu, battery, weight, rating, link_href, brand, series) "
            "FROM STDIN WITH CSV HEADER DELIMITER ','",
            f
        )
    print("‚úÖ Data successfully imported into the database.")
except Exception as e:
    print(f"‚ùå Error importing data into PostgreSQL: {e}")

# ‚úÖ Step 5: Ki·ªÉm tra d·ªØ li·ªáu sau khi import
try:
    cur.execute("SELECT COUNT(*) FROM laptops;")
    count = cur.fetchone()[0]
    print(f"‚úÖ Total records in 'laptops': {count}")
except Exception as e:
    print(f"‚ùå Error verifying data: {e}")

# ‚úÖ Step 6: ƒê√≥ng k·∫øt n·ªëi
cur.close()
conn.close()
print("üîí Connection closed successfully.")
